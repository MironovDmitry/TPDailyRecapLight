//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TPDailyRecapLight.AMService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PriorityEnum", Namespace="http://schemas.datacontract.org/2004/07/AsyncMailService")]
    public enum PriorityEnum : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        High = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Normal = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Low = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AppointmentItem", Namespace="http://schemas.datacontract.org/2004/07/AsyncMailService")]
    [System.SerializableAttribute()]
    public partial class AppointmentItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BodyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationEmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string> ParametersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> PrevEndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrevLocationEmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> PrevStartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] RecipientsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReservationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TemplateNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Body {
            get {
                return this.BodyField;
            }
            set {
                if ((object.ReferenceEquals(this.BodyField, value) != true)) {
                    this.BodyField = value;
                    this.RaisePropertyChanged("Body");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LocationEmail {
            get {
                return this.LocationEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationEmailField, value) != true)) {
                    this.LocationEmailField = value;
                    this.RaisePropertyChanged("LocationEmail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> Parameters {
            get {
                return this.ParametersField;
            }
            set {
                if ((object.ReferenceEquals(this.ParametersField, value) != true)) {
                    this.ParametersField = value;
                    this.RaisePropertyChanged("Parameters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> PrevEndDate {
            get {
                return this.PrevEndDateField;
            }
            set {
                if ((this.PrevEndDateField.Equals(value) != true)) {
                    this.PrevEndDateField = value;
                    this.RaisePropertyChanged("PrevEndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrevLocationEmail {
            get {
                return this.PrevLocationEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.PrevLocationEmailField, value) != true)) {
                    this.PrevLocationEmailField = value;
                    this.RaisePropertyChanged("PrevLocationEmail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> PrevStartDate {
            get {
                return this.PrevStartDateField;
            }
            set {
                if ((this.PrevStartDateField.Equals(value) != true)) {
                    this.PrevStartDateField = value;
                    this.RaisePropertyChanged("PrevStartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Recipients {
            get {
                return this.RecipientsField;
            }
            set {
                if ((object.ReferenceEquals(this.RecipientsField, value) != true)) {
                    this.RecipientsField = value;
                    this.RaisePropertyChanged("Recipients");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReservationID {
            get {
                return this.ReservationIDField;
            }
            set {
                if ((this.ReservationIDField.Equals(value) != true)) {
                    this.ReservationIDField = value;
                    this.RaisePropertyChanged("ReservationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sender {
            get {
                return this.SenderField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderField, value) != true)) {
                    this.SenderField = value;
                    this.RaisePropertyChanged("Sender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TemplateName {
            get {
                return this.TemplateNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TemplateNameField, value) != true)) {
                    this.TemplateNameField = value;
                    this.RaisePropertyChanged("TemplateName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AMService.IAMService")]
    public interface IAMService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAMService/AddToMailQueue", ReplyAction="http://tempuri.org/IAMService/AddToMailQueueResponse")]
        string AddToMailQueue(string title, string htmlMessage, string sender, string recipients, System.Nullable<int> attemptCount, TPDailyRecapLight.AMService.PriorityEnum priority, System.Nullable<System.TimeSpan> validTime, string serviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAMService/AddToMailQueue", ReplyAction="http://tempuri.org/IAMService/AddToMailQueueResponse")]
        System.Threading.Tasks.Task<string> AddToMailQueueAsync(string title, string htmlMessage, string sender, string recipients, System.Nullable<int> attemptCount, TPDailyRecapLight.AMService.PriorityEnum priority, System.Nullable<System.TimeSpan> validTime, string serviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAMService/AddToMailQueueAsIs", ReplyAction="http://tempuri.org/IAMService/AddToMailQueueAsIsResponse")]
        string AddToMailQueueAsIs(string title, string htmlMessage, string sender, string recipients, System.Nullable<int> attemptCount, TPDailyRecapLight.AMService.PriorityEnum priority, System.Nullable<System.TimeSpan> validTime, string serviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAMService/AddToMailQueueAsIs", ReplyAction="http://tempuri.org/IAMService/AddToMailQueueAsIsResponse")]
        System.Threading.Tasks.Task<string> AddToMailQueueAsIsAsync(string title, string htmlMessage, string sender, string recipients, System.Nullable<int> attemptCount, TPDailyRecapLight.AMService.PriorityEnum priority, System.Nullable<System.TimeSpan> validTime, string serviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAMService/AddToMailQueueTemplate", ReplyAction="http://tempuri.org/IAMService/AddToMailQueueTemplateResponse")]
        string AddToMailQueueTemplate(string title, string sender, string recipients, System.Nullable<int> attemptCount, string template, System.Collections.Generic.Dictionary<string, string> parameters, TPDailyRecapLight.AMService.PriorityEnum priority, System.Nullable<System.TimeSpan> validTime, string serviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAMService/AddToMailQueueTemplate", ReplyAction="http://tempuri.org/IAMService/AddToMailQueueTemplateResponse")]
        System.Threading.Tasks.Task<string> AddToMailQueueTemplateAsync(string title, string sender, string recipients, System.Nullable<int> attemptCount, string template, System.Collections.Generic.Dictionary<string, string> parameters, TPDailyRecapLight.AMService.PriorityEnum priority, System.Nullable<System.TimeSpan> validTime, string serviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAMService/CreateAppointment", ReplyAction="http://tempuri.org/IAMService/CreateAppointmentResponse")]
        string CreateAppointment(TPDailyRecapLight.AMService.AppointmentItem appointment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAMService/CreateAppointment", ReplyAction="http://tempuri.org/IAMService/CreateAppointmentResponse")]
        System.Threading.Tasks.Task<string> CreateAppointmentAsync(TPDailyRecapLight.AMService.AppointmentItem appointment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAMService/UpdateAppointment", ReplyAction="http://tempuri.org/IAMService/UpdateAppointmentResponse")]
        string UpdateAppointment(TPDailyRecapLight.AMService.AppointmentItem appointment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAMService/UpdateAppointment", ReplyAction="http://tempuri.org/IAMService/UpdateAppointmentResponse")]
        System.Threading.Tasks.Task<string> UpdateAppointmentAsync(TPDailyRecapLight.AMService.AppointmentItem appointment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAMService/MoveAppointment", ReplyAction="http://tempuri.org/IAMService/MoveAppointmentResponse")]
        string MoveAppointment(TPDailyRecapLight.AMService.AppointmentItem appointment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAMService/MoveAppointment", ReplyAction="http://tempuri.org/IAMService/MoveAppointmentResponse")]
        System.Threading.Tasks.Task<string> MoveAppointmentAsync(TPDailyRecapLight.AMService.AppointmentItem appointment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAMService/DeleteAppointment", ReplyAction="http://tempuri.org/IAMService/DeleteAppointmentResponse")]
        string DeleteAppointment(int reservationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAMService/DeleteAppointment", ReplyAction="http://tempuri.org/IAMService/DeleteAppointmentResponse")]
        System.Threading.Tasks.Task<string> DeleteAppointmentAsync(int reservationId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAMServiceChannel : TPDailyRecapLight.AMService.IAMService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AMServiceClient : System.ServiceModel.ClientBase<TPDailyRecapLight.AMService.IAMService>, TPDailyRecapLight.AMService.IAMService {
        
        public AMServiceClient() {
        }
        
        public AMServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AMServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AMServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AMServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string AddToMailQueue(string title, string htmlMessage, string sender, string recipients, System.Nullable<int> attemptCount, TPDailyRecapLight.AMService.PriorityEnum priority, System.Nullable<System.TimeSpan> validTime, string serviceName) {
            return base.Channel.AddToMailQueue(title, htmlMessage, sender, recipients, attemptCount, priority, validTime, serviceName);
        }
        
        public System.Threading.Tasks.Task<string> AddToMailQueueAsync(string title, string htmlMessage, string sender, string recipients, System.Nullable<int> attemptCount, TPDailyRecapLight.AMService.PriorityEnum priority, System.Nullable<System.TimeSpan> validTime, string serviceName) {
            return base.Channel.AddToMailQueueAsync(title, htmlMessage, sender, recipients, attemptCount, priority, validTime, serviceName);
        }
        
        public string AddToMailQueueAsIs(string title, string htmlMessage, string sender, string recipients, System.Nullable<int> attemptCount, TPDailyRecapLight.AMService.PriorityEnum priority, System.Nullable<System.TimeSpan> validTime, string serviceName) {
            return base.Channel.AddToMailQueueAsIs(title, htmlMessage, sender, recipients, attemptCount, priority, validTime, serviceName);
        }
        
        public System.Threading.Tasks.Task<string> AddToMailQueueAsIsAsync(string title, string htmlMessage, string sender, string recipients, System.Nullable<int> attemptCount, TPDailyRecapLight.AMService.PriorityEnum priority, System.Nullable<System.TimeSpan> validTime, string serviceName) {
            return base.Channel.AddToMailQueueAsIsAsync(title, htmlMessage, sender, recipients, attemptCount, priority, validTime, serviceName);
        }
        
        public string AddToMailQueueTemplate(string title, string sender, string recipients, System.Nullable<int> attemptCount, string template, System.Collections.Generic.Dictionary<string, string> parameters, TPDailyRecapLight.AMService.PriorityEnum priority, System.Nullable<System.TimeSpan> validTime, string serviceName) {
            return base.Channel.AddToMailQueueTemplate(title, sender, recipients, attemptCount, template, parameters, priority, validTime, serviceName);
        }
        
        public System.Threading.Tasks.Task<string> AddToMailQueueTemplateAsync(string title, string sender, string recipients, System.Nullable<int> attemptCount, string template, System.Collections.Generic.Dictionary<string, string> parameters, TPDailyRecapLight.AMService.PriorityEnum priority, System.Nullable<System.TimeSpan> validTime, string serviceName) {
            return base.Channel.AddToMailQueueTemplateAsync(title, sender, recipients, attemptCount, template, parameters, priority, validTime, serviceName);
        }
        
        public string CreateAppointment(TPDailyRecapLight.AMService.AppointmentItem appointment) {
            return base.Channel.CreateAppointment(appointment);
        }
        
        public System.Threading.Tasks.Task<string> CreateAppointmentAsync(TPDailyRecapLight.AMService.AppointmentItem appointment) {
            return base.Channel.CreateAppointmentAsync(appointment);
        }
        
        public string UpdateAppointment(TPDailyRecapLight.AMService.AppointmentItem appointment) {
            return base.Channel.UpdateAppointment(appointment);
        }
        
        public System.Threading.Tasks.Task<string> UpdateAppointmentAsync(TPDailyRecapLight.AMService.AppointmentItem appointment) {
            return base.Channel.UpdateAppointmentAsync(appointment);
        }
        
        public string MoveAppointment(TPDailyRecapLight.AMService.AppointmentItem appointment) {
            return base.Channel.MoveAppointment(appointment);
        }
        
        public System.Threading.Tasks.Task<string> MoveAppointmentAsync(TPDailyRecapLight.AMService.AppointmentItem appointment) {
            return base.Channel.MoveAppointmentAsync(appointment);
        }
        
        public string DeleteAppointment(int reservationId) {
            return base.Channel.DeleteAppointment(reservationId);
        }
        
        public System.Threading.Tasks.Task<string> DeleteAppointmentAsync(int reservationId) {
            return base.Channel.DeleteAppointmentAsync(reservationId);
        }
    }
}
